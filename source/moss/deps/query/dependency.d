/*
 * This file is part of moss-deps.
 *
 * Copyright Â© 2020-2021 Serpent OS Developers
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

module moss.deps.query.dependency;

public import std.stdint : uint8_t;

/**
 * A supported dependency has only a limited number of types,
 * which are generated by moss-deps and consumed by us too.
 */
public enum DependencyType : uint8_t
{
    /**
     * Invalid (unsupported) dependency
     */
    Invalid = 0,

    /**
     * A basic name dependency
     */
    PackageName,

    /**
     * Depends on a specific ELF SONAME
     */
    LibraryName,

    /**
     * Provided by the name field of the pkgconfig .pc file
     */
    PkgconfigName,
}

/**
 * A Dependency is an explicit relationship between two packages. Specialised
 * dependencies do exist for matching.
 */
public struct Dependency
{
    /**
     * The dependant target string
     */
    string target = null;

    /**
     * Type of the dependency
     */
    DependencyType type = DependencyType.Invalid;

    /**
     * Return true if both dependencies are equal
     */
    bool opEquals()(auto ref const Dependency other) const
    {
        return other.target == target && other.type == type;
    }

    /**
     * Compare two dependencies with the same type
     */
    int opCmp(ref const Dependency other) const
    {
        if (this.target < other.target)
        {
            return -1;
        }
        else if (this.target > other.target)
        {
            return 1;
        }
        if (this.type < other.type)
        {
            return -1;
        }
        else if (this.type > other.type)
        {
            return 1;
        }
        return 0;
    }

    /**
     * Return the hash code for the label
     */
    ulong toHash() @safe nothrow const
    {
        return typeid(string).getHash(&target);
    }

}
